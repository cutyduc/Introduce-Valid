import { Chip, ChipProps as MuiChipProps } from "@mui/material";

/**
 * CoreChipProps = k·∫ø th·ª´a to√†n b·ªô props t·ª´ MUI Chip
 * + b·∫°n c√≥ th·ªÉ th√™m props custom ri√™ng ·ªü ƒë√¢y
 */
export interface CoreChipProps extends MuiChipProps {
  highlight?: boolean; // üîπ Custom prop ri√™ng: l√†m label ƒë·∫≠m h∆°n
  lable: string;
  clickable?: boolean;
}

// ‚úÖ Danh s√°ch props c√≥ s·∫µn c·ªßa MUI Chip (tham kh·∫£o nhanh)
/**
 * avatar?: React.ReactNode;                // Avatar (icon/·∫£nh tr√≤n nh·ªè) tr∆∞·ªõc label
 * children?: never;                        // ‚ùå Kh√¥ng h·ªó tr·ª£ children (d√πng label thay th·∫ø)
 * classes?: object;                        // Override style cho t·ª´ng ph·∫ßn (root, label...)
 * clickable?: boolean;                     // N·∫øu true, chip c√≥ hi·ªáu ·ª©ng hover/click
 * color?: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' | string;  // M√†u s·∫Øc
 * component?: React.ElementType;           // Component g·ªëc (div, a, span...)
 * deleteIcon?: React.ReactNode;            // Icon thay th·∫ø cho n√∫t x√≥a
 * disabled?: boolean;                      // Disable chip
 * icon?: React.ReactNode;                  // Icon nh·ªè ƒë·∫∑t tr∆∞·ªõc label (kh√°c avatar)
 * label?: React.ReactNode;                 // N·ªôi dung ch√≠nh hi·ªÉn th·ªã
 * onDelete?: (event) => void;              // Callback khi b·∫•m icon x√≥a
 * size?: 'small' | 'medium' | string;      // K√≠ch c·ª° chip
 * skipFocusWhenDisabled?: boolean;         // N·∫øu true, chip disabled kh√¥ng nh·∫≠n focus
 * slotProps?: object;                      // Truy·ªÅn props cho slot con (root, label, deleteIcon...)
 * slots?: object;                          // Override component cho slot con
 * sx?: SxProps<Theme>;                     // Tu·ª≥ ch·ªânh style (CSS-in-JS)
 * variant?: 'filled' | 'outlined' | string; // Ki·ªÉu giao di·ªán (m·∫∑c ƒë·ªãnh: filled)
 */

export default function CoreChip(props: CoreChipProps) {
  const { highlight, sx, lable, clickable = true, ...rest } = props;

  return (
    <Chip
      clickable={clickable}
      label={lable}
      {...rest}
      sx={{
        fontWeight: highlight ? 700 : 400, // custom prop
        ...sx,
      }}
    />
  );
}
